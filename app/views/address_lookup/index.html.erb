<% content_for :title, "Address Lookup" %>

<style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f8f9fa;
    }
    
    .container {
      background: white;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    h1 {
      color: #333;
      margin-bottom: 30px;
      text-align: center;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #555;
    }
    
    input[type="text"] {
      width: 100%;
      padding: 12px;
      border: 2px solid #ddd;
      border-radius: 6px;
      font-size: 16px;
      transition: border-color 0.2s;
      box-sizing: border-box;
    }
    
    input[type="text"]:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }
    
    .btn {
      background: #007bff;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .btn:hover:not(:disabled) {
      background: #0056b3;
    }
    
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    
    .btn-observation {
      background: #28a745;
      margin-top: 10px;
      width: 100%;
    }
    
    .btn-observation:hover {
      background: #218838;
    }
    
    .loading {
      display: none;
      margin-left: 10px;
      color: #666;
    }
    
    .result {
      margin-top: 30px;
      padding: 20px;
      border-radius: 6px;
      display: none;
    }
    
    .result.success {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      color: #155724;
    }
    
    .result.error {
      background: #f8d7da;
      border: 1px solid #f5c6cb;
      color: #721c24;
    }
    
    .result h3 {
      margin-top: 0;
      margin-bottom: 15px;
    }
    
    .result-item {
      margin-bottom: 8px;
    }
    
    .result-label {
      font-weight: 600;
      display: inline-block;
      min-width: 120px;
    }
    
    .coordinates {
      font-family: 'Monaco', 'Menlo', monospace;
      background: rgba(255,255,255,0.3);
      padding: 2px 6px;
      border-radius: 3px;
    }
    
    .manual-form {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 6px;
      padding: 20px;
      margin-top: 20px;
    }
    
    .manual-form h4 {
      color: #856404;
      margin: 0 0 15px 0;
      font-size: 16px;
    }
    
    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-bottom: 15px;
    }
    
    .form-row.single {
      grid-template-columns: 1fr;
    }
    
    .manual-form input[type="text"] {
      padding: 10px;
      font-size: 14px;
    }
    
    .manual-form label {
      font-size: 14px;
      margin-bottom: 5px;
    }
    
    .btn-manual {
      background: #856404;
      color: white;
      width: 100%;
      margin-top: 10px;
    }
    
    .btn-manual:hover {
      background: #6c5200;
    }
  </style>
  <div class="container">
    <h1>üó∫Ô∏è Address Lookup</h1>
    <p style="text-align: center; color: #666; margin-bottom: 30px;">
      Search for addresses using OpenStreetMap data
    </p>
    
    <form id="addressForm">
      <div class="form-group">
        <label for="address">Enter an address:</label>
        <input 
          type="text" 
          id="address" 
          name="address" 
          placeholder="e.g., 1600 Amphitheatre Parkway, Mountain View, CA"
          required
        >
      </div>
      
      <button type="submit" class="btn" id="searchBtn">
        Search Address
      </button>
      <span class="loading" id="loading">Searching...</span>
    </form>
    
    <div id="result" class="result">
      <h3 id="resultTitle"></h3>
      <div id="resultContent"></div>
    </div>
  </div>

  <script>
    document.getElementById('addressForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const address = document.getElementById('address').value.trim();
      const searchBtn = document.getElementById('searchBtn');
      const loading = document.getElementById('loading');
      const result = document.getElementById('result');
      const resultTitle = document.getElementById('resultTitle');
      const resultContent = document.getElementById('resultContent');
      
      if (!address) {
        showResult('error', 'Error', 'Please enter an address to search.');
        return;
      }
      
      // Show loading state
      searchBtn.disabled = true;
      loading.style.display = 'inline';
      result.style.display = 'none';
      
      try {
        const response = await fetch('/address_lookup/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({ address: address })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showSuccessResult(data);
        } else {
          showNotFoundResult(address, data.error || 'Unable to find this address.');
        }
      } catch (error) {
        console.error('Search failed:', error);
        showResult('error', 'Search Failed', 'Unable to search for address. Please try again.');
      } finally {
        // Hide loading state
        searchBtn.disabled = false;
        loading.style.display = 'none';
      }
    });
    
    function showSuccessResult(data) {
      const content = `
        <div class="result-item">
          <span class="result-label">Formatted Address:</span>
          ${escapeHtml(data.formatted_address)}
        </div>
        ${data.coordinates_available ? `
          <div class="result-item">
            <span class="result-label">Coordinates:</span>
            <span class="coordinates">${data.latitude}, ${data.longitude}</span>
          </div>
        ` : ''}
        <div class="result-actions" style="margin-top: 20px; padding-top: 15px; border-top: 1px solid rgba(0,0,0,0.1);">
          <button onclick="createObservation('${escapeHtml(data.formatted_address)}')" 
                  class="btn btn-observation">
            üìã Create Observation for This Address
          </button>
        </div>
      `;
      
      showResult('success', '‚úÖ Address Found', content);
    }
    
    function showNotFoundResult(originalAddress, errorMessage) {
      const content = `
        <div class="result-item" style="margin-bottom: 15px;">
          <strong>Could not find address:</strong> ${escapeHtml(originalAddress)}
        </div>
        <div class="result-item" style="margin-bottom: 20px; color: #666;">
          ${escapeHtml(errorMessage)}
        </div>
        
        <div class="manual-form">
          <h4>üìù Enter Address Details Manually</h4>
          <form id="manualAddressForm">
            <div class="form-row single">
              <div>
                <label for="manual_street">Street Address *</label>
                <input type="text" id="manual_street" name="street_address" 
                       placeholder="e.g., 123 Main Street" required>
              </div>
            </div>
            <div class="form-row">
              <div>
                <label for="manual_city">City *</label>
                <input type="text" id="manual_city" name="city" 
                       placeholder="e.g., San Francisco" required>
              </div>
              <div>
                <label for="manual_state">State/Province</label>
                <input type="text" id="manual_state" name="state_province" 
                       placeholder="e.g., CA">
              </div>
            </div>
            <div class="form-row">
              <div>
                <label for="manual_postal">Postal Code</label>
                <input type="text" id="manual_postal" name="postal_code" 
                       placeholder="e.g., 94102">
              </div>
              <div>
                <label for="manual_country">Country *</label>
                <input type="text" id="manual_country" name="country" 
                       placeholder="e.g., US" required>
              </div>
            </div>
            <button type="submit" class="btn btn-manual">
              üìã Create Observation with Manual Address
            </button>
          </form>
        </div>
      `;
      
      showResult('error', '‚ùå Address Not Found', content);
      
      // Add event listener for manual form submission
      setTimeout(() => {
        document.getElementById('manualAddressForm').addEventListener('submit', handleManualAddressSubmission);
      }, 100);
    }
    
    function showResult(type, title, content) {
      const result = document.getElementById('result');
      const resultTitle = document.getElementById('resultTitle');
      const resultContent = document.getElementById('resultContent');
      
      result.className = `result ${type}`;
      resultTitle.textContent = title;
      resultContent.innerHTML = content;
      result.style.display = 'block';
      
      // Scroll to result
      result.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    
    function handleManualAddressSubmission(e) {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const addressData = {};
      for (let [key, value] of formData.entries()) {
        addressData[key] = value.trim();
      }
      
      // Basic validation
      if (!addressData.street_address || !addressData.city || !addressData.country) {
        alert('Please fill in all required fields (Street Address, City, and Country).');
        return;
      }
      
      if (addressData.street_address.length < 5) {
        alert('Street address must be at least 5 characters long.');
        return;
      }
      
      if (addressData.city.length < 2) {
        alert('City must be at least 2 characters long.');
        return;
      }
      
      if (addressData.country.length < 2) {
        alert('Country must be at least 2 characters long.');
        return;
      }
      
      // Create a formatted address string
      const addressParts = [
        addressData.street_address,
        addressData.city,
        addressData.state_province,
        addressData.postal_code,
        addressData.country
      ].filter(part => part && part.trim());
      
      const formattedAddress = addressParts.join(', ');
      
      // Navigate to observations form with the manual address and property data
      const url = new URL('/observations/new', window.location.origin);
      url.searchParams.set('normalized_address', formattedAddress);
      
      // Add individual address components as well
      Object.entries(addressData).forEach(([key, value]) => {
        if (value) {
          url.searchParams.set(key, value);
        }
      });
      
      window.location.href = url.toString();
    }
    
    function createObservation(formattedAddress) {
      // Navigate to observations form with the validated address
      const url = new URL('/observations/new', window.location.origin);
      url.searchParams.set('normalized_address', formattedAddress);
      window.location.href = url.toString();
    }
  </script>